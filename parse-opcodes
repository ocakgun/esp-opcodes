#!/usr/bin/python

import math
import sys
import tokenize

namelist = []
match = {}
mask = {}
pseudos = {}
arguments = {}

arglut = {}
arglut['rd'] = (11,7)
arglut['rs1'] = (19,15)
arglut['rs2'] = (24,20)
arglut['rs3'] = (31,27)
arglut['aqrl'] = (26,25)
arglut['pred'] = (27,24)
arglut['succ'] = (23,20)
arglut['rm'] = (14,12)
arglut['imm20'] = (31,12)
arglut['jimm20'] = (31,12)
arglut['imm12'] = (31,20)
arglut['imm12hi'] = (31,25)
arglut['bimm12hi'] = (31,25)
arglut['imm12lo'] = (11,7)
arglut['bimm12lo'] = (11,7)
arglut['zimm'] = (19,15)
arglut['shamt'] = (25,20)
arglut['shamtw'] = (24,20)

arglut['svrdhi'] = (22,20)
arglut['svrdlo'] = (11,7)
arglut['svard']  = (11,7)

arglut['vseglen'] = (47,45)
arglut['vpred'] = (15,12)
arglut['vrd'] = (23,16)
arglut['vrs1'] = (31,24)
arglut['vrs2'] = (40,33)
arglut['vrs3'] = (48,41)
arglut['vprd'] = (19,16)
arglut['vprs1'] = (27,24)
arglut['vprs2'] = (36,33)
arglut['vprs3'] = (44,41)
arglut['vpfunc'] = (57,50)
arglut['vars1'] = (28,24)
arglut['vars2'] = (37,33)
arglut['vimm'] = (63,32)
arglut['vcimm'] = (63,35)
arglut['vshamt'] = (37,32)
arglut['vshamtw'] = (36,32)
arglut['vn'] = (32,32)
arglut['vd'] = (63,63)
arglut['vs1'] = (62,62)
arglut['vs2'] = (61,61)
arglut['vs3'] = (60,60)
arglut['vcond'] = (34,33)
arglut['vaqrl'] = (54,53)
arglut['vrm']   = (52,50)
arglut['vprev'] = (23,20)
arglut['vsucc'] = (19,16)

causes = [
  (0x00, 'misaligned fetch'),
  (0x01, 'fetch access'),
  (0x02, 'illegal instruction'),
  (0x03, 'breakpoint'),
  (0x04, 'misaligned load'),
  (0x05, 'load access'),
  (0x06, 'misaligned store'),
  (0x07, 'store access'),
  (0x08, 'user_ecall'),
  (0x09, 'supervisor_ecall'),
  (0x0A, 'hypervisor_ecall'),
  (0x0B, 'machine_ecall'),
  (0x0C, 'fetch page fault'),
  (0x0D, 'load page fault'),
  (0x0F, 'store page fault'),
]

csrs = [
  # Standard User R/W
  (0x001, 'fflags'),
  (0x002, 'frm'),
  (0x003, 'fcsr'),

  # Standard User RO
  (0xC00, 'cycle'),
  (0xC01, 'time'),
  (0xC02, 'instret'),
  (0xC03, 'hpmcounter3'),
  (0xC04, 'hpmcounter4'),
  (0xC05, 'hpmcounter5'),
  (0xC06, 'hpmcounter6'),
  (0xC07, 'hpmcounter7'),
  (0xC08, 'hpmcounter8'),
  (0xC09, 'hpmcounter9'),
  (0xC0A, 'hpmcounter10'),
  (0xC0B, 'hpmcounter11'),
  (0xC0C, 'hpmcounter12'),
  (0xC0D, 'hpmcounter13'),
  (0xC0E, 'hpmcounter14'),
  (0xC0F, 'hpmcounter15'),
  (0xC10, 'hpmcounter16'),
  (0xC11, 'hpmcounter17'),
  (0xC12, 'hpmcounter18'),
  (0xC13, 'hpmcounter19'),
  (0xC14, 'hpmcounter20'),
  (0xC15, 'hpmcounter21'),
  (0xC16, 'hpmcounter22'),
  (0xC17, 'hpmcounter23'),
  (0xC18, 'hpmcounter24'),
  (0xC19, 'hpmcounter25'),
  (0xC1A, 'hpmcounter26'),
  (0xC1B, 'hpmcounter27'),
  (0xC1C, 'hpmcounter28'),
  (0xC1D, 'hpmcounter29'),
  (0xC1E, 'hpmcounter30'),
  (0xC1F, 'hpmcounter31'),

  # Standard Supervisor R/W
  (0x100, 'sstatus'),
  (0x104, 'sie'),
  (0x105, 'stvec'),
  (0x106, 'scounteren'),
  (0x140, 'sscratch'),
  (0x141, 'sepc'),
  (0x142, 'scause'),
  (0x143, 'sbadaddr'),
  (0x144, 'sip'),
  (0x180, 'sptbr'),

  # Standard Machine R/W
  (0x300, 'mstatus'),
  (0x301, 'misa'),
  (0x302, 'medeleg'),
  (0x303, 'mideleg'),
  (0x304, 'mie'),
  (0x305, 'mtvec'),
  (0x306, 'mcounteren'),
  (0x340, 'mscratch'),
  (0x341, 'mepc'),
  (0x342, 'mcause'),
  (0x343, 'mbadaddr'),
  (0x344, 'mip'),
  (0x3a0, 'pmpcfg0'),
  (0x3a1, 'pmpcfg1'),
  (0x3a2, 'pmpcfg2'),
  (0x3a3, 'pmpcfg3'),
  (0x3b0, 'pmpaddr0'),
  (0x3b1, 'pmpaddr1'),
  (0x3b2, 'pmpaddr2'),
  (0x3b3, 'pmpaddr3'),
  (0x3b4, 'pmpaddr4'),
  (0x3b5, 'pmpaddr5'),
  (0x3b6, 'pmpaddr6'),
  (0x3b7, 'pmpaddr7'),
  (0x3b8, 'pmpaddr8'),
  (0x3b9, 'pmpaddr9'),
  (0x3ba, 'pmpaddr10'),
  (0x3bb, 'pmpaddr11'),
  (0x3bc, 'pmpaddr12'),
  (0x3bd, 'pmpaddr13'),
  (0x3be, 'pmpaddr14'),
  (0x3bf, 'pmpaddr15'),
  (0x7a0, 'tselect'),
  (0x7a1, 'tdata1'),
  (0x7a2, 'tdata2'),
  (0x7a3, 'tdata3'),
  (0x7b0, 'dcsr'),
  (0x7b1, 'dpc'),
  (0x7b2, 'dscratch'),
  (0xB00, 'mcycle'),
  (0xB02, 'minstret'),
  (0xB03, 'mhpmcounter3'),
  (0xB04, 'mhpmcounter4'),
  (0xB05, 'mhpmcounter5'),
  (0xB06, 'mhpmcounter6'),
  (0xB07, 'mhpmcounter7'),
  (0xB08, 'mhpmcounter8'),
  (0xB09, 'mhpmcounter9'),
  (0xB0A, 'mhpmcounter10'),
  (0xB0B, 'mhpmcounter11'),
  (0xB0C, 'mhpmcounter12'),
  (0xB0D, 'mhpmcounter13'),
  (0xB0E, 'mhpmcounter14'),
  (0xB0F, 'mhpmcounter15'),
  (0xB10, 'mhpmcounter16'),
  (0xB11, 'mhpmcounter17'),
  (0xB12, 'mhpmcounter18'),
  (0xB13, 'mhpmcounter19'),
  (0xB14, 'mhpmcounter20'),
  (0xB15, 'mhpmcounter21'),
  (0xB16, 'mhpmcounter22'),
  (0xB17, 'mhpmcounter23'),
  (0xB18, 'mhpmcounter24'),
  (0xB19, 'mhpmcounter25'),
  (0xB1A, 'mhpmcounter26'),
  (0xB1B, 'mhpmcounter27'),
  (0xB1C, 'mhpmcounter28'),
  (0xB1D, 'mhpmcounter29'),
  (0xB1E, 'mhpmcounter30'),
  (0xB1F, 'mhpmcounter31'),
  (0x323, 'mhpmevent3'),
  (0x324, 'mhpmevent4'),
  (0x325, 'mhpmevent5'),
  (0x326, 'mhpmevent6'),
  (0x327, 'mhpmevent7'),
  (0x328, 'mhpmevent8'),
  (0x329, 'mhpmevent9'),
  (0x32A, 'mhpmevent10'),
  (0x32B, 'mhpmevent11'),
  (0x32C, 'mhpmevent12'),
  (0x32D, 'mhpmevent13'),
  (0x32E, 'mhpmevent14'),
  (0x32F, 'mhpmevent15'),
  (0x330, 'mhpmevent16'),
  (0x331, 'mhpmevent17'),
  (0x332, 'mhpmevent18'),
  (0x333, 'mhpmevent19'),
  (0x334, 'mhpmevent20'),
  (0x335, 'mhpmevent21'),
  (0x336, 'mhpmevent22'),
  (0x337, 'mhpmevent23'),
  (0x338, 'mhpmevent24'),
  (0x339, 'mhpmevent25'),
  (0x33A, 'mhpmevent26'),
  (0x33B, 'mhpmevent27'),
  (0x33C, 'mhpmevent28'),
  (0x33D, 'mhpmevent29'),
  (0x33E, 'mhpmevent30'),
  (0x33F, 'mhpmevent31'),

  # Standard Machine RO
  (0xF11, 'mvendorid'),
  (0xF12, 'marchid'),
  (0xF13, 'mimpid'),
  (0xF14, 'mhartid'),
]

csrs32 = [
  # Standard User RO
  (0xC80, 'cycleh'),
  (0xC81, 'timeh'),
  (0xC82, 'instreth'),
  (0xC83, 'hpmcounter3h'),
  (0xC84, 'hpmcounter4h'),
  (0xC85, 'hpmcounter5h'),
  (0xC86, 'hpmcounter6h'),
  (0xC87, 'hpmcounter7h'),
  (0xC88, 'hpmcounter8h'),
  (0xC89, 'hpmcounter9h'),
  (0xC8A, 'hpmcounter10h'),
  (0xC8B, 'hpmcounter11h'),
  (0xC8C, 'hpmcounter12h'),
  (0xC8D, 'hpmcounter13h'),
  (0xC8E, 'hpmcounter14h'),
  (0xC8F, 'hpmcounter15h'),
  (0xC90, 'hpmcounter16h'),
  (0xC91, 'hpmcounter17h'),
  (0xC92, 'hpmcounter18h'),
  (0xC93, 'hpmcounter19h'),
  (0xC94, 'hpmcounter20h'),
  (0xC95, 'hpmcounter21h'),
  (0xC96, 'hpmcounter22h'),
  (0xC97, 'hpmcounter23h'),
  (0xC98, 'hpmcounter24h'),
  (0xC99, 'hpmcounter25h'),
  (0xC9A, 'hpmcounter26h'),
  (0xC9B, 'hpmcounter27h'),
  (0xC9C, 'hpmcounter28h'),
  (0xC9D, 'hpmcounter29h'),
  (0xC9E, 'hpmcounter30h'),
  (0xC9F, 'hpmcounter31h'),

  # Standard Machine RW
  (0xB80, 'mcycleh'),
  (0xB82, 'minstreth'),
  (0xB83, 'mhpmcounter3h'),
  (0xB84, 'mhpmcounter4h'),
  (0xB85, 'mhpmcounter5h'),
  (0xB86, 'mhpmcounter6h'),
  (0xB87, 'mhpmcounter7h'),
  (0xB88, 'mhpmcounter8h'),
  (0xB89, 'mhpmcounter9h'),
  (0xB8A, 'mhpmcounter10h'),
  (0xB8B, 'mhpmcounter11h'),
  (0xB8C, 'mhpmcounter12h'),
  (0xB8D, 'mhpmcounter13h'),
  (0xB8E, 'mhpmcounter14h'),
  (0xB8F, 'mhpmcounter15h'),
  (0xB90, 'mhpmcounter16h'),
  (0xB91, 'mhpmcounter17h'),
  (0xB92, 'mhpmcounter18h'),
  (0xB93, 'mhpmcounter19h'),
  (0xB94, 'mhpmcounter20h'),
  (0xB95, 'mhpmcounter21h'),
  (0xB96, 'mhpmcounter22h'),
  (0xB97, 'mhpmcounter23h'),
  (0xB98, 'mhpmcounter24h'),
  (0xB99, 'mhpmcounter25h'),
  (0xB9A, 'mhpmcounter26h'),
  (0xB9B, 'mhpmcounter27h'),
  (0xB9C, 'mhpmcounter28h'),
  (0xB9D, 'mhpmcounter29h'),
  (0xB9E, 'mhpmcounter30h'),
  (0xB9F, 'mhpmcounter31h'),
]

opcode_base = 0
opcode_size = 7
funct_base = 12
funct_size = 3

#vector funct fields
vopcode_base = 0
vopcode_size = 12
vfunct_3_base = 50
vfunct_3_size = 3
vfunct_7_base = 53
vfunct_7_size = 7
vfunct_5_base = 55
vfunct_5_size = 5
vfunct_pop_base = 58
vfunct_pop_size = 2
vfunct_r4_base = 49
vfunct_r4_size = 1
vfunct_r_base = 41
vfunct_r_size = 9
vfunct_b_base = 16
vfunct_b_size = 16
vfunct_u_base = 24
vfunct_u_size = 8
vfunct_i_base = 12
vfunct_i_size = 4

#vector padding fields for predicate regs(4 bits pad) and addr regs(3 bits pad)
vpad_prd_base = 20
vpad_prs1_base = 28
vpad_prs2_base = 37
vpad_prs3_base = 45
vpad_p_size = 4
vpad_ars1_base = 29
vpad_ars2_base = 38
vpad_a_size = 3

def binary(n, digits=0):
  rep = bin(n)[2:]
  return rep if digits == 0 else ('0' * (digits - len(rep))) + rep

def make_c(match,mask):
  print '/* Automatically generated by parse-opcodes.  */'
  print '#ifndef RISCV_ENCODING_H'
  print '#define RISCV_ENCODING_H'
  for name in namelist:
    name2 = name.upper().replace('.','_')
    print '#define MATCH_%s %s' % (name2, hex(match[name]))
    print '#define MASK_%s  %s' % (name2, hex(mask[name]))
  for num, name in csrs+csrs32:
    print '#define CSR_%s %s' % (name.upper(), hex(num))
  for num, name in causes:
    print '#define CAUSE_%s %s' % (name.upper().replace(' ', '_'), hex(num))
  print '#endif'

  print '#ifdef DECLARE_INSN'
  for name in namelist:
    name2 = name.replace('.','_')
    print 'DECLARE_INSN(%s, MATCH_%s, MASK_%s)' % (name2, name2.upper(), name2.upper())
  print '#endif'

  print '#ifdef DECLARE_CSR'
  for num, name in csrs+csrs32:
    print 'DECLARE_CSR(%s, CSR_%s)' % (name, name.upper())
  print '#endif'

  print '#ifdef DECLARE_CAUSE'
  for num, name in causes:
    print 'DECLARE_CAUSE("%s", CAUSE_%s)' % (name, name.upper().replace(' ', '_'))
  print '#endif'

def yank(num,start,len):
  return (num >> start) & ((1 << len) - 1)

def str_arg(arg0,name,match,arguments):
  if arg0 in arguments:
    return name or arg0
  else:
    start = arglut[arg0][1]
    len = arglut[arg0][0] - arglut[arg0][1] + 1
    return binary(yank(match,start,len),len)

def str_inst(name,arguments):
  return name.replace('.rv32','').upper()

def print_unimp_type(name,match,arguments):
  print """
&
\\multicolumn{10}{|c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    '0'*32, \
    'UNIMP' \
  )

def print_u_type(name,match,arguments):
  print """
&
\\multicolumn{8}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('imm20','imm[31:12]',match,arguments), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_uj_type(name,match,arguments):
  print """
&
\\multicolumn{8}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('jimm20','imm[20$\\vert$10:1$\\vert$11$\\vert$19:12]',match,arguments), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_s_type(name,match,arguments):
  print """
&
\\multicolumn{4}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('imm12hi','imm[11:5]',match,arguments), \
    str_arg('rs2','',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('imm12lo','imm[4:0]',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_sb_type(name,match,arguments):
  print """
&
\\multicolumn{4}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('bimm12hi','imm[12$\\vert$10:5]',match,arguments), \
    str_arg('rs2','',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('bimm12lo','imm[4:1$\\vert$11]',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_i_type(name,match,arguments):
  print """
&
\\multicolumn{6}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('imm12','imm[11:0]',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_csr_type(name,match,arguments):
  print """
&
\\multicolumn{6}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('imm12','csr',match,arguments), \
    ('zimm' if name[-1] == 'i' else 'rs1'), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_ish_type(name,match,arguments):
  print """
&
\\multicolumn{3}{|c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    binary(yank(match,26,6),6), \
    str_arg('shamt','shamt',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_ishw_type(name,match,arguments):
  print """
&
\\multicolumn{4}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    binary(yank(match,25,7),7), \
    str_arg('shamtw','shamt',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_r_type(name,match,arguments):
  print """
&
\\multicolumn{4}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    binary(yank(match,25,7),7), \
    str_arg('rs2','',match,arguments), \
    'zimm' in arguments and str_arg('zimm','imm[4:0]',match,arguments) or str_arg('rs1','',match,arguments), \
    str_arg('rm','',match,arguments), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_r4_type(name,match,arguments):
  print """
&
\\multicolumn{2}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    str_arg('rs3','',match,arguments), \
    binary(yank(match,25,2),2), \
    str_arg('rs2','',match,arguments), \
    str_arg('rs1','',match,arguments), \
    str_arg('rm','',match,arguments), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_amo_type(name,match,arguments):
  print """
&
\\multicolumn{2}{|c|}{%s} &
\\multicolumn{1}{c|}{aq} &
\\multicolumn{1}{c|}{rl} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    binary(yank(match,27,5),5), \
    str_arg('rs2','',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_fence_type(name,match,arguments):
  print """
&
\\multicolumn{2}{|c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{2-11}
  """ % \
  ( \
    binary(yank(match,28,4),4), \
    str_arg('pred','pred',match,arguments), \
    str_arg('succ','',match,arguments), \
    str_arg('rs1','',match,arguments), \
    binary(yank(match,funct_base,funct_size),funct_size), \
    str_arg('rd','',match,arguments), \
    binary(yank(match,opcode_base,opcode_size),opcode_size), \
    str_inst(name,arguments) \
  )

def print_vb_type(name,match,arguments):
  print """
\\multicolumn{15}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{5}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vcimm','imm[31:3]',match,arguments), \
    str_arg('vcond','c2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    binary(yank(match,vfunct_b_base,vfunct_b_size),vfunct_b_size), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vj_type(name,match,arguments):
  print """
\\multicolumn{15}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vcimm','imm[31:3]',match,arguments), \
    str_arg('vcond','c2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','ss1',match,arguments), \
    str_arg('vrd','sd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vu_type(name,match,arguments):
  print """
\\multicolumn{17}{|c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
    str_arg('vimm','imm[31:0]',match,arguments), \
    binary(yank(match,vfunct_u_base,vfunct_u_size),vfunct_u_size), \
    str_arg('vrd','sd',match,arguments), \
    binary(yank(match,vfunct_i_base,vfunct_i_size),vfunct_i_size), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vi_type(name,match,arguments):
  print """
\\multicolumn{17}{|c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
    str_arg('vimm','imm[31:0]',match,arguments), \
    str_arg('vrs1','ss1',match,arguments), \
    str_arg('vrd','sd',match,arguments), \
    binary(yank(match,vfunct_i_base,vfunct_i_size),vfunct_i_size), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vish_type(name,match,arguments):
  print """
\\multicolumn{14}{|c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
    str_arg('vimm','',match,arguments), \
    str_arg('vshamt','shamt',match,arguments), \
    str_arg('vrs1','ss1',match,arguments), \
    str_arg('vrd','sd',match,arguments), \
    binary(yank(match,vfunct_i_base,vfunct_i_size),vfunct_i_size), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vishw_type(name,match,arguments):
  print """
\\multicolumn{15}{|c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
    str_arg('vimm','',match,arguments), \
    str_arg('vshamtw','shamt',match,arguments), \
    str_arg('vrs1','ss1',match,arguments), \
    str_arg('vrd','sd',match,arguments), \
    binary(yank(match,vfunct_i_base,vfunct_i_size),vfunct_i_size), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vr_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    str_arg('vrm','rm',match,arguments), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','rs2' if 'vs2' in arguments else 'vs2' if(yank(match,61,1)==1) else 'ss2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','rs1' if 'vs1' in arguments else 'vs1' if(yank(match,62,1)==1) else 'ss1',match,arguments), \
    str_arg('vrd','rd' if 'vd' in arguments else 'vd' if (yank(match,63,1)==1) else 'sd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vr4_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','s3',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    str_arg('vrm','rm',match,arguments), \
    binary(yank(match,vfunct_r4_base,vfunct_r4_size),vfunct_r4_size), \
    str_arg('vrs3','rs3',match,arguments), \
    str_arg('vrs2','rs2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','rs1',match,arguments), \
    str_arg('vrd','rd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vidx_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','s3',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    str_arg('vseglen', 'seglen',match,arguments), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','vs2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','ss1',match,arguments), \
    str_arg('vrd','vd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vsmem_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    str_arg('vseglen', 'seglen',match,arguments), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','rs2' if 'vs2' in arguments else 'vs2' if (yank(match,63,1)==1) else 'ss2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    binary(yank(match,vpad_ars1_base,vpad_a_size),vpad_a_size), \
    str_arg('vars1','as1',match,arguments), \
    str_arg('vrd','rd' if 'vd' in arguments else 'vd' if (yank(match,63,1)==1) else 'sd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vseg_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    str_arg('vseglen', 'seglen',match,arguments), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    binary(yank(match,vpad_ars2_base,vpad_a_size),vpad_a_size), \
    str_arg('vars2','as2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    binary(yank(match,vpad_ars1_base,vpad_a_size),vpad_a_size), \
    str_arg('vars1','as1',match,arguments), \
    str_arg('vrd','rd' if 'vd' in arguments else 'vd' if (yank(match,63,1)==1) else 'sd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vfirst_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    binary(yank(match,vfunct_3_base,vfunct_3_size),vfunct_3_size), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','vs2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','vs1',match,arguments), \
    str_arg('vrd','sd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vpmem_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    binary(yank(match,vfunct_3_base,vfunct_3_size),vfunct_3_size), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    binary(yank(match,vpad_prs2_base,vpad_p_size),vpad_p_size), \
    str_arg('vprs2','ps2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    binary(yank(match,vpad_ars1_base,vpad_a_size),vpad_a_size), \
    str_arg('vars1','as1',match,arguments), \
    binary(yank(match,vpad_prd_base,vpad_p_size),vpad_p_size), \
    str_arg('vprd','pd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vpcmp_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_7_base,vfunct_7_size),vfunct_7_size), \
    binary(yank(match,vfunct_3_base,vfunct_3_size),vfunct_3_size), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','rs2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','rs1',match,arguments), \
    binary(yank(match,vpad_prd_base,vpad_p_size),vpad_p_size), \
    str_arg('vprd','pd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vpop_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','d',match,arguments), \
    str_arg('vs1','n1',match,arguments), \
    str_arg('vs2','n2',match,arguments), \
    str_arg('vs3','n3',match,arguments), \
    binary(yank(match,vfunct_pop_base,vfunct_pop_size),vfunct_pop_size), \
    str_arg('vpfunc','op',match,arguments), \
    binary(yank(match,vfunct_r4_base,vfunct_r4_size),vfunct_r4_size), \
    binary(yank(match,vpad_prs3_base,vpad_p_size),vpad_p_size), \
    str_arg('vprs3','ps3',match,arguments), \
    binary(yank(match,vpad_prs2_base,vpad_p_size),vpad_p_size), \
    str_arg('vprs2','ps2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    binary(yank(match,vpad_prs1_base,vpad_p_size),vpad_p_size), \
    str_arg('vprs1','ps1',match,arguments), \
    binary(yank(match,vpad_prd_base,vpad_p_size),vpad_p_size), \
    str_arg('vprd','pd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vamo_type(name,match,arguments):
  print """
\\multicolumn{1}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{aq} &
\\multicolumn{1}{c|}{rl} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{4}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{2}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vd','1',match,arguments), \
    str_arg('vs1','s1',match,arguments), \
    str_arg('vs2','s2',match,arguments), \
    str_arg('vs3','0',match,arguments), \
    binary(yank(match,vfunct_5_base,vfunct_5_size),vfunct_5_size), \
    binary(yank(match,vfunct_3_base,vfunct_3_size),vfunct_3_size), \
    binary(yank(match,vfunct_r_base,vfunct_r_size),vfunct_r_size), \
    str_arg('vrs2','rs2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','rs1',match,arguments), \
    str_arg('vrd','vd',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_vfence_type(name,match,arguments):
  print """
\\multicolumn{15}{|c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{3}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} &
\\multicolumn{1}{c|}{%s} & %s \\\\
\\cline{1-24}
  """ % \
  ( \
  str_arg('vcimm','imm[31:3]',match,arguments), \
    str_arg('vcond','c2',match,arguments), \
    str_arg('vn','n',match,arguments), \
    str_arg('vrs1','',match,arguments), \
    str_arg('vprev','prev',match,arguments), \
    str_arg('vsucc','succ',match,arguments), \
    str_arg('vpred','pred',match,arguments), \
    binary(yank(match,vopcode_base,vopcode_size),vopcode_size), \
    str_inst(name,arguments) \
  )

def print_header(*types):
  print """
\\newpage

\\begin{table}[p]
\\begin{small}
\\begin{center}
\\begin{tabular}{p{0in}p{0.4in}p{0.05in}p{0.05in}p{0.05in}p{0.05in}p{0.4in}p{0.6in}p{0.4in}p{0.6in}p{0.7in}l}
& & & & & & & & & & \\\\
                      &
\\multicolumn{1}{l}{\\instbit{31}} &
\\multicolumn{1}{r}{\\instbit{27}} &
\\instbit{26} &
\\instbit{25} &
\\multicolumn{1}{l}{\\instbit{24}} &
\\multicolumn{1}{r}{\\instbit{20}} &
\\instbitrange{19}{15} &
\\instbitrange{14}{12} &
\\instbitrange{11}{7} &
\\instbitrange{6}{0} \\\\
\\cline{2-11}
"""
  if 'r' in types:
    print """
&
\\multicolumn{4}{|c|}{funct7} &
\\multicolumn{2}{c|}{rs2} &
\\multicolumn{1}{c|}{rs1} &
\\multicolumn{1}{c|}{funct3} &
\\multicolumn{1}{c|}{rd} &
\\multicolumn{1}{c|}{opcode} & R-type \\\\
\\cline{2-11}
"""
  if 'r4' in types:
    print """
&
\\multicolumn{2}{|c|}{rs3} &
\\multicolumn{2}{c|}{funct2} &
\\multicolumn{2}{c|}{rs2} &
\\multicolumn{1}{c|}{rs1} &
\\multicolumn{1}{c|}{funct3} &
\\multicolumn{1}{c|}{rd} &
\\multicolumn{1}{c|}{opcode} & R4-type \\\\
\\cline{2-11}
  """
  if 'i' in types:
    print """
&
\\multicolumn{6}{|c|}{imm[11:0]} &
\\multicolumn{1}{c|}{rs1} &
\\multicolumn{1}{c|}{funct3} &
\\multicolumn{1}{c|}{rd} &
\\multicolumn{1}{c|}{opcode} & I-type \\\\
\\cline{2-11}
"""
  if 's' in types:
    print """
&
\\multicolumn{4}{|c|}{imm[11:5]} &
\\multicolumn{2}{c|}{rs2} &
\\multicolumn{1}{c|}{rs1} &
\\multicolumn{1}{c|}{funct3} &
\\multicolumn{1}{c|}{imm[4:0]} &
\\multicolumn{1}{c|}{opcode} & S-type \\\\
\\cline{2-11}
"""
  if 'sb' in types:
    print """
&
\\multicolumn{4}{|c|}{imm[12$\\vert$10:5]} &
\\multicolumn{2}{c|}{rs2} &
\\multicolumn{1}{c|}{rs1} &
\\multicolumn{1}{c|}{funct3} &
\\multicolumn{1}{c|}{imm[4:1$\\vert$11]} &
\\multicolumn{1}{c|}{opcode} & SB-type \\\\
\\cline{2-11}
"""
  if 'u' in types:
    print """
&
\\multicolumn{8}{|c|}{imm[31:12]} &
\\multicolumn{1}{c|}{rd} &
\\multicolumn{1}{c|}{opcode} & U-type \\\\
\\cline{2-11}
"""
  if 'uj' in types:
    print """
&
\\multicolumn{8}{|c|}{imm[20$\\vert$10:1$\\vert$11$\\vert$19:12]} &
\\multicolumn{1}{c|}{rd} &
\\multicolumn{1}{c|}{opcode} & UJ-type \\\\
\\cline{2-11}
"""

def print_hwacha_header(*types):
  print """
\\newpage

\\newgeometry{margin=1cm}
\\begin{landscape}
\\thispagestyle{empty}
\\begin{table}[p]
\\begin{small}
\\begin{center}
\\begin{tabular}{p{0.08in}@{}p{0.08in}@{}p{0.08in}@{}p{0.08in}@{}p{0.10in}@{}p{0.10in}@{}p{0.08in}@{}p{0.08in}@{}p{0.30in}@{}p{0.08in}@{}p{0.4in}@{}p{0.4in}@{}p{0.30in}@{}p{0.1in}@{}p{0.28in}@{}p{0.28in}@{}p{0.08in}@{}p{0.3in}@{}p{0.08in}@{}p{0.4in}@{}p{0.4in}@{}p{0.4in}@{}p{0.4in}@{}p{0.56in}l}
\\\\
\multicolumn{1}{@{}c@{}}{\instbit{63}} &
\multicolumn{1}{@{}c@{}}{\instbit{62}} &
\multicolumn{1}{@{}c@{}}{\instbit{61}} &
\multicolumn{1}{@{}c@{}}{\instbit{60}} &
\multicolumn{4}{@{}c@{}}{\instbitrange{59}{53}} &
\instbitrange{52}{50} &
\multicolumn{1}{@{}c@{}}{\instbit{49}} &
\instbitrange{48}{45} &
\instbitrange{44}{41} &
\instbitrange{40}{38} &
\multicolumn{1}{@{}c@{}}{\instbit{37}} &
\instbitrange{36}{35} &
\instbitrange{34}{33} &
\multicolumn{1}{@{}c@{}}{\instbit{32}} &
\instbitrange{31}{29} &
\multicolumn{1}{@{}c@{}}{\instbit{28}} &
\instbitrange{27}{24} &
\instbitrange{23}{20} &
\instbitrange{19}{16} &
\instbitrange{15}{12} &
\instbitrange{11}{0} \\\\
\cline{1-24}
"""
  if 'vb' in types:
    print """
\multicolumn{15}{|c|}{imm[31:3]} &
\multicolumn{1}{c|}{c2} &
\multicolumn{1}{c|}{n} &
\multicolumn{5}{c|}{funct16} &
\multicolumn{1}{c|}{pred} &
\multicolumn{1}{c|}{opcode} &
VB-type \\\\
\cline{1-24}
"""
  if 'vj' in types:
    print """
\multicolumn{15}{|c|}{imm[31:3]} &
\multicolumn{1}{c|}{c2} &
\multicolumn{1}{c|}{n} &
\multicolumn{3}{c|}{vs1} &
\multicolumn{2}{c|}{vd} &
\multicolumn{1}{c|}{pred} &
\multicolumn{1}{c|}{opcode} &
VJ-type \\\\
\cline{1-24}
  """
  if 'vu' in types:
    print """
\multicolumn{17}{|c|}{imm[31:0]} &
\multicolumn{3}{c|}{funct8} &
\multicolumn{2}{c|}{vd} &
\multicolumn{1}{c|}{funct4} &
\multicolumn{1}{c|}{opcode} &
VU-type \\\\
\cline{1-24}
"""
  if 'vi' in types:
    print """
\multicolumn{17}{|c|}{imm[31:0]} &
\multicolumn{3}{c|}{vs1} &
\multicolumn{2}{c|}{vd} &
\multicolumn{1}{c|}{funct4} &
\multicolumn{1}{c|}{opcode} &
VI-type \\\\
\cline{1-24}
"""
  if 'vr' in types:
    print """
\multicolumn{1}{|c|}{d} &
\multicolumn{1}{c|}{1} &
\multicolumn{1}{c|}{2} &
\multicolumn{1}{c|}{f} &
\multicolumn{4}{c|}{funct7} &
\multicolumn{1}{c|}{funct3} &
\multicolumn{3}{c|}{funct9} &
\multicolumn{4}{c|}{vs2} &
\multicolumn{1}{c|}{n} &
\multicolumn{3}{c|}{vs1} &
\multicolumn{2}{c|}{vd} &
\multicolumn{1}{c|}{pred} &
\multicolumn{1}{c|}{opcode} &
VR-type \\\\
\cline{1-24}
"""
  if 'vr4' in types:
    print """
\multicolumn{1}{|c|}{d} &
\multicolumn{1}{c|}{1} &
\multicolumn{1}{c|}{2} &
\multicolumn{1}{c|}{3} &
\multicolumn{4}{c|}{funct7} &
\multicolumn{1}{c|}{funct3} &
\multicolumn{1}{c|}{f} &
\multicolumn{2}{c|}{vs3} &
\multicolumn{4}{c|}{vs2} &
\multicolumn{1}{c|}{n} &
\multicolumn{3}{c|}{vs1} &
\multicolumn{2}{c|}{vd} &
\multicolumn{1}{c|}{pred} &
\multicolumn{1}{c|}{opcode} &
VR4-type \\\\
\cline{1-24}
"""

def print_subtitle(title):
  print """
&
\\multicolumn{10}{c}{} & \\\\
&
\\multicolumn{10}{c}{\\bf %s} & \\\\
\\cline{2-11}
  """ % title

def print_hwacha_subtitle(title):
  print """
&
\\multicolumn{23}{c}{} & \\\\
&
\\multicolumn{23}{c}{\\bf %s} & \\\\
\\cline{1-24}
  """ % title

def print_footer(caption=''):
  print """
\\end{tabular}
\\end{center}
\\end{small}
%s
\\label{instr-table}
\\end{table}
  """ % caption

def print_hwacha_footer(caption):
  print """
\\end{tabular}
\\end{center}
\\end{small}
%s
\\label{instr-table}
\\end{table}
\\end{landscape}
\\restoregeometry
  """ % (caption and '\\caption{Instruction listing for Hwacha}' or '')

def print_inst(n):
  if n == 'fence' or n == 'fence.i':
    print_fence_type(n, match[n], arguments[n])
  elif 'aqrl' in arguments[n]:
    print_amo_type(n, match[n], arguments[n])
  elif 'shamt' in arguments[n]:
    print_ish_type(n, match[n], arguments[n])
  elif 'shamtw' in arguments[n]:
    print_ishw_type(n, match[n], arguments[n])
  elif 'imm20' in arguments[n]:
    print_u_type(n, match[n], arguments[n])
  elif 'jimm20' in arguments[n]:
    print_uj_type(n, match[n], arguments[n])
  elif n[:3] == 'csr':
    print_csr_type(n, match[n], arguments[n])
  elif 'imm12' in arguments[n] or n == 'ecall' or n == 'ebreak':
    print_i_type(n, match[n], arguments[n])
  elif 'imm12hi' in arguments[n]:
    print_s_type(n, match[n], arguments[n])
  elif 'bimm12hi' in arguments[n]:
    print_sb_type(n, match[n], arguments[n])
  elif 'rs3' in arguments[n]:
    print_r4_type(n, match[n], arguments[n])
  else:
    print_r_type(n, match[n], arguments[n])

def print_hwacha_inst(n):
  if 'first' in n:
    print_vfirst_type(n, match[n], arguments[n])
  elif 'fence' in n:
    print_vfence_type(n, match[n], arguments[n])
  elif 'vaqrl' in arguments[n]:
    print_vamo_type(n, match[n], arguments[n])
  elif 'vshamt' in arguments[n]:
    print_vish_type(n, match[n], arguments[n])
  elif 'vshamtw' in arguments[n]:
    print_vishw_type(n, match[n], arguments[n])
  elif 'vimm' in arguments[n]:
    if 'vrs1' in arguments[n]:
      print_vi_type(n, match[n], arguments[n])
    else:
      print_vu_type(n, match[n], arguments[n])
  elif 'vcond' in arguments[n]:
    if 'vrd' in arguments[n]:
      print_vj_type(n, match[n], arguments[n])
    else:
      print_vb_type(n, match[n], arguments[n])
  elif 'vrs3' in arguments[n]:
    print_vr4_type(n, match[n], arguments[n])
  elif 'vprd' in arguments[n] or 'vprs2' in arguments[n]:
    if 'vars1' in arguments[n]:
      print_vpmem_type(n, match[n], arguments[n])
    elif 'vprs3' in arguments[n]:
      print_vpop_type(n, match[n], arguments[n])
    elif 'clear' in n or 'set' in n:
      print_vpop_type(n, match[n], arguments[n])
    else:
      print_vpcmp_type(n, match[n], arguments[n])
  elif 'vars1' in arguments[n]:
    if 'vrs2' in arguments[n]:
      print_vsmem_type(n, match[n], arguments[n])
    else:
      print_vseg_type(n, match[n], arguments[n])
  else:
    #if 'x' in n and not 'vd' in arguments[n]:
      #print_vidx_type(n, match[n], arguments[n])
    #else:  
    print_vr_type(n, match[n], arguments[n])

def print_insts(*names):
  for n in names:
    print_inst(n)

def print_hwacha_insts(*names):
  for n in names:
    print_hwacha_inst(n)

def make_supervisor_latex_table():
  print_header('i')
  print_subtitle('Environment Call and Breakpoint')
  print_insts('ecall', 'ebreak')
  print_subtitle('Trap-Return Instructions')
  print_insts('uret', 'sret', 'mret')
  print_subtitle('Interrupt-Management Instructions')
  print_insts('wfi')
  print_subtitle('Memory-Management Instructions')
  print_insts('sfence.vma')
  print_footer('\\caption{RISC-V Privileged Instructions}')

def make_latex_table():
  print_header('r','i','s','sb','u','uj')
  print_subtitle('RV32I Base Instruction Set')
  print_insts('lui', 'auipc')
  print_insts('jal', 'jalr', 'beq', 'bne', 'blt', 'bge', 'bltu', 'bgeu')
  print_insts('lb', 'lh', 'lw', 'lbu', 'lhu', 'sb', 'sh', 'sw')
  print_insts('addi', 'slti', 'sltiu', 'xori', 'ori', 'andi', 'slli.rv32', 'srli.rv32', 'srai.rv32')
  print_insts('add', 'sub', 'sll', 'slt', 'sltu', 'xor', 'srl', 'sra', 'or', 'and')
  print_insts('fence', 'fence.i')
  print_insts('ecall', 'ebreak')
  print_insts('csrrw', 'csrrs', 'csrrc')
  print_insts('csrrwi', 'csrrsi', 'csrrci')
  print_footer()

  print_header('r','a','i','s')
  print_subtitle('RV64I Base Instruction Set (in addition to RV32I)')
  print_insts('lwu', 'ld', 'sd')
  print_insts('slli', 'srli', 'srai')
  print_insts('addiw', 'slliw', 'srliw', 'sraiw')
  print_insts('addw', 'subw', 'sllw', 'srlw', 'sraw')
  print_subtitle('RV32M Standard Extension')
  print_insts('mul', 'mulh', 'mulhsu', 'mulhu')
  print_insts('div', 'divu', 'rem', 'remu')
  print_subtitle('RV64M Standard Extension (in addition to RV32M)')
  print_insts('mulw', 'divw', 'divuw', 'remw', 'remuw')
  print_subtitle('RV32A Standard Extension')
  print_insts('lr.w', 'sc.w')
  print_insts('amoswap.w')
  print_insts('amoadd.w', 'amoxor.w', 'amoand.w', 'amoor.w')
  print_insts('amomin.w', 'amomax.w', 'amominu.w', 'amomaxu.w')
  print_footer()

  print_header('r','r4','i','s')
  print_subtitle('RV64A Standard Extension (in addition to RV32A)')
  print_insts('lr.d', 'sc.d')
  print_insts('amoswap.d')
  print_insts('amoadd.d', 'amoxor.d', 'amoand.d', 'amoor.d')
  print_insts('amomin.d', 'amomax.d', 'amominu.d', 'amomaxu.d')
  print_subtitle('RV32F Standard Extension')
  print_insts('flw', 'fsw')
  print_insts('fmadd.s', 'fmsub.s', 'fnmsub.s', 'fnmadd.s')
  print_insts('fadd.s', 'fsub.s', 'fmul.s', 'fdiv.s', 'fsqrt.s')
  print_insts('fsgnj.s', 'fsgnjn.s', 'fsgnjx.s', 'fmin.s', 'fmax.s')
  print_insts('fcvt.w.s', 'fcvt.wu.s', 'fmv.x.w')
  print_insts('feq.s', 'flt.s', 'fle.s', 'fclass.s')
  print_insts('fcvt.s.w', 'fcvt.s.wu', 'fmv.w.x')
  print_footer()

  print_header('r','r4','i','s')
  print_subtitle('RV64F Standard Extension (in addition to RV32F)')
  print_insts('fcvt.l.s', 'fcvt.lu.s')
  print_insts('fcvt.s.l', 'fcvt.s.lu')
  print_subtitle('RV32D Standard Extension')
  print_insts('fld', 'fsd')
  print_insts('fmadd.d', 'fmsub.d', 'fnmsub.d', 'fnmadd.d')
  print_insts('fadd.d', 'fsub.d', 'fmul.d', 'fdiv.d', 'fsqrt.d')
  print_insts('fsgnj.d', 'fsgnjn.d', 'fsgnjx.d', 'fmin.d', 'fmax.d')
  print_insts('fcvt.s.d', 'fcvt.d.s')
  print_insts('feq.d', 'flt.d', 'fle.d', 'fclass.d')
  print_insts('fcvt.w.d', 'fcvt.wu.d')
  print_insts('fcvt.d.w', 'fcvt.d.wu')
  print_subtitle('RV64D Standard Extension (in addition to RV32D)')
  print_insts('fcvt.l.d', 'fcvt.lu.d', 'fmv.x.d')
  print_insts('fcvt.d.l', 'fcvt.d.lu', 'fmv.d.x')
  print_footer('\\caption{Instruction listing for RISC-V}')


def make_hwacha_latex_table():
  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Load/Store Instructions (Unit-Stride, Unit-Stride-Segmented)')
  print_hwacha_insts('vlb', 'vlh', 'vlw', 'vld', 'vlbu', 'vlhu', 'vlwu', 'vsb', 'vsh', 'vsw', 'vsd')
  print_hwacha_insts('vlsegb', 'vlsegh', 'vlsegw', 'vlsegd', 'vlsegbu', 'vlseghu', 'vlsegwu', 'vssegb', 'vssegh', 'vssegw', 'vssegd')
  print_hwacha_footer(0)

  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Load/Store Instructions (Constant-Stride, Constant-Stride-Segmented)')
  print_hwacha_insts('vlstb', 'vlsth', 'vlstw', 'vlstd', 'vlstbu', 'vlsthu', 'vlstwu', 'vsstb', 'vssth', 'vsstw', 'vsstd')
  print_hwacha_insts('vlsegstb', 'vlsegsth', 'vlsegstw', 'vlsegstd', 'vlsegstbu', 'vlsegsthu', 'vlsegstwu', 'vssegstb', 'vssegsth', 'vssegstw', 'vssegstd')
  print_hwacha_footer(0)

  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Indexed Load/Store Instructions')
  print_hwacha_insts('vlxb', 'vlxh', 'vlxw', 'vlxd', 'vlxbu', 'vlxhu', 'vlxwu', 'vsxb', 'vsxh', 'vsxw', 'vsxd')
  print_hwacha_insts('vlsegxb', 'vlsegxh', 'vlsegxw', 'vlsegxd', 'vlsegxbu', 'vlsegxhu', 'vlsegxwu', 'vssegxb', 'vssegxh', 'vssegxw')
  print_hwacha_footer(0)

  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Atomic Memory Instructions')
  print_hwacha_insts('vamoswap.w')
  print_hwacha_insts('vamoadd.w', 'vamoxor.w', 'vamoand.w', 'vamoor.w')
  print_hwacha_insts('vamomin.w', 'vamomax.w', 'vamominu.w', 'vamomaxu.w')
  print_hwacha_insts('vamoswap.d')
  print_hwacha_insts('vamoadd.d', 'vamoxor.d', 'vamoand.d', 'vamoor.d')
  print_hwacha_insts('vamomin.d', 'vamomax.d', 'vamominu.d', 'vamomaxu.d')
  print_hwacha_footer(0)

  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Integer Arithmetic Instructions')
  print_hwacha_insts('veidx', 'vfirst')
  print_hwacha_insts('vadd', 'vaddu', 'vsub', 'vsll', 'vslt', 'vsltu', 'vxor', 'vsrl', 'vsra', 'vor', 'vand')
  print_hwacha_insts('vaddw', 'vsubw', 'vsllw', 'vsrlw', 'vsraw')
  print_hwacha_insts('vmul', 'vmulh', 'vmulhsu', 'vmulhu')
  print_hwacha_insts('vdiv', 'vdivu', 'vrem', 'vremu')
  print_hwacha_insts('vmulw', 'vdivw', 'vdivuw', 'vremw', 'vremuw')
  print_hwacha_footer(0)

  print_hwacha_header('vr','vr4')
  print_hwacha_subtitle('Hwacha Vector Floating-Point Arithmetic Instructions (Double-Precision)')
  print_hwacha_insts('vfmadd.d', 'vfmsub.d', 'vfnmsub.d', 'vfnmadd.d')
  print_hwacha_insts('vfadd.d', 'vfsub.d', 'vfmul.d', 'vfdiv.d', 'vfsqrt.d')
  print_hwacha_insts('vfsgnj.d', 'vfsgnjn.d', 'vfsgnjx.d', 'vfmin.d', 'vfmax.d')
  print_hwacha_insts('vfcvt.d.s', 'vfcvt.d.h')
  print_hwacha_insts('vfclass.d')
  print_hwacha_subtitle('Hwacha Vector Floating-Point Arithmetic Instructions (Single-Precision)')
  print_hwacha_insts('vfmadd.s', 'vfmsub.s', 'vfnmsub.s', 'vfnmadd.s')
  print_hwacha_insts('vfadd.s', 'vfsub.s', 'vfmul.s', 'vfdiv.s', 'vfsqrt.s')
  print_hwacha_insts('vfsgnj.s', 'vfsgnjn.s', 'vfsgnjx.s', 'vfmin.s', 'vfmax.s')
  print_hwacha_insts('vfcvt.s.d', 'vfcvt.s.h')
  print_hwacha_insts('vfclass.s')
  print_hwacha_footer(0)

  print_hwacha_header('vr','vr4')
  print_hwacha_subtitle('Hwacha Vector Floating-Point Arithmetic Instructions (Half-Precision)')
  print_hwacha_insts('vfmadd.h', 'vfmsub.h', 'vfnmsub.h', 'vfnmadd.h')
  print_hwacha_insts('vfadd.h', 'vfsub.h', 'vfmul.h', 'vfdiv.h', 'vfsqrt.h')
  print_hwacha_insts('vfsgnj.h', 'vfsgnjn.h', 'vfsgnjx.h', 'vfmin.h', 'vfmax.h')
  print_hwacha_insts('vfcvt.h.d', 'vfcvt.h.s')
  print_hwacha_insts('vfclass.h')
  print_hwacha_subtitle('Hwacha Vector Floating-Point Arithmetic Instructions (Widening-Precision)')
  print_hwacha_insts('vfadd.s.h', 'vfsub.s.h', 'vfmul.s.h')
  print_hwacha_insts('vfmadd.d.h', 'vfmsub.d.h', 'vfnmsub.d.h', 'vfnmadd.d.h', 'vfadd.d.h', 'vfsub.d.h', 'vfmul.d.h')
  print_hwacha_insts('vfadd.d.s', 'vfsub.d.s', 'vfmul.d.s')
  print_hwacha_footer(0)

  print_hwacha_header('vr')
  print_hwacha_subtitle('Hwacha Vector Floating-Point to/from Integer Conversion Instructions')
  print_hwacha_insts('vfcvt.w.d', 'vfcvt.wu.d', 'vfcvt.l.d', 'vfcvt.lu.d')
  print_hwacha_insts('vfcvt.d.w', 'vfcvt.d.wu', 'vfcvt.d.l', 'vfcvt.d.lu')
  print_hwacha_insts('vfcvt.w.s', 'vfcvt.wu.s', 'vfcvt.l.s', 'vfcvt.lu.s')
  print_hwacha_insts('vfcvt.s.w', 'vfcvt.s.wu', 'vfcvt.s.l', 'vfcvt.s.lu')
  print_hwacha_insts('vfcvt.w.h', 'vfcvt.wu.h', 'vfcvt.l.h', 'vfcvt.lu.h')
  print_hwacha_insts('vfcvt.h.w', 'vfcvt.h.wu', 'vfcvt.h.l', 'vfcvt.h.lu')
  print_hwacha_footer(0)

  print_hwacha_header('vr','vr4')
  print_hwacha_subtitle('Hwacha Vector Compare Instructions')
  print_hwacha_insts('vcmpeq', 'vcmplt', 'vcmpltu')
  print_hwacha_insts('vcmpfeq.d', 'vcmpflt.d', 'vcmpfle.d')
  print_hwacha_insts('vcmpfeq.s', 'vcmpflt.s', 'vcmpfle.s')
  print_hwacha_insts('vcmpfeq.h', 'vcmpflt.h', 'vcmpfle.h')
  print_hwacha_subtitle('Hwacha Vector Predicate Memory Instructions')
  print_hwacha_insts('vpl', 'vps')
  print_hwacha_subtitle('Hwacha Vector Predicate Arithmetic Instructions')
  print_hwacha_insts('vpop')
  print_hwacha_insts('vpclear', 'vpset', 'vpxorxor', 'vpxoror', 'vpxorand', 'vporxor', 'vporor', 'vporand','vpandxor', 'vpandor', 'vpandand')
  print_hwacha_footer(0)

  print_hwacha_header('vj','vu','vi','vr')
  print_hwacha_subtitle('Hwacha Scalar Load/Store Instructions')
  print_hwacha_insts('vlsb', 'vlsh', 'vlsw', 'vlsd', 'vlsbu', 'vlshu', 'vlswu', 'vssb', 'vssh', 'vssw', 'vssd')
  print_hwacha_insts('vlab', 'vlah', 'vlaw', 'vlad', 'vlabu', 'vlahu', 'vlawu', 'vsab', 'vsah', 'vsaw', 'vsad')
  print_hwacha_subtitle('Hwacha Scalar Arithemtic Instructions')
  print_hwacha_insts('vlui', 'vauipc')
  print_hwacha_insts('vaddi', 'vslti', 'vsltiu', 'vxori', 'vori', 'vandi', 'vslli', 'vsrli', 'vsrai')
  print_hwacha_insts('vaddiw', 'vslliw', 'vsrliw', 'vsraiw')
  print_hwacha_footer(0)

  print_hwacha_header('vj','vu')
  print_hwacha_subtitle('Hwacha Control Flow Instructions')
  print_hwacha_insts('vstop','vfence')
  print_hwacha_insts('vcjal', 'vcjalr')
  print_hwacha_footer(0)

def print_chisel_insn(name):
  s = "  def %-18s = BitPat(\"b" % name.replace('.', '_').upper()
  for i in range(31, -1, -1):
    if yank(mask[name], i, 1):
      s = '%s%d' % (s, yank(match[name], i, 1))
    else:
      s = s + '?'
  print s + "\")"

def print_hwacha_chisel_insn(name):
  s = "  def %-18s = BitPat(\"b" % name.replace('.', '_').upper()
  for i in range(63, -1, -1):
    if yank(mask[name], i, 1):
      s = '%s%d' % (s, yank(match[name], i, 1))
    else:
      s = s + '?'
  print s + "\")"

def make_chisel():
  print '/* Automatically generated by parse-opcodes */'
  print 'object Instructions {'
  for name in namelist:
    print_chisel_insn(name)
  print '}'
  print 'object Causes {'
  for num, name in causes:
    print '  val %s = %s' % (name.lower().replace(' ', '_'), hex(num))
  print '  val all = {'
  print '    val res = collection.mutable.ArrayBuffer[Int]()'
  for num, name in causes:
    print '    res += %s' % (name.lower().replace(' ', '_'))
  print '    res.toArray'
  print '  }'
  print '}'
  print 'object CSRs {'
  for num, name in csrs+csrs32:
    print '  val %s = %s' % (name, hex(num))
  print '  val all = {'
  print '    val res = collection.mutable.ArrayBuffer[Int]()'
  for num, name in csrs:
    print '    res += %s' % (name)
  print '    res.toArray'
  print '  }'
  print '  val all32 = {'
  print '    val res = collection.mutable.ArrayBuffer(all:_*)'
  for num, name in csrs32:
    print '    res += %s' % (name)
  print '    res.toArray'
  print '  }'
  print '}'

def insn_length(name):
  if((match[name] & 0x03) < 0x03):
    return 2
  elif((match[name] & 0x1f) < 0x1f):
    return 4
  elif((match[name] & 0x3f) < 0x3f):
    return 6
  else:
    return 8

def make_hwacha_chisel():
  print '/* Automatically generated by parse-opcodes */'
  print 'package hwacha\n'
  print 'import Chisel._\n'
  print 'object HwachaInstructions {'
  for name in namelist:
    if(insn_length(name) == 4):
      print_chisel_insn(name)
  print '}'
  print 'object HwachaElementInstructions {'
  for name in namelist:
    if(insn_length(name) == 8):
      print_hwacha_chisel_insn(name)
  print '}'

for line in sys.stdin:
  line = line.partition('#')
  tokens = line[0].split()

  if len(tokens) == 0:
    continue
  assert len(tokens) >= 2

  name = tokens[0]
  pseudo = name[0] == '@'
  if pseudo:
    name = name[1:]
  mymatch = 0
  mymask = 0
  cover = 0

  if not name in arguments.keys():
    arguments[name] = []

  for token in tokens[1:]:
    if len(token.split('=')) == 2:
      tokens = token.split('=')
      if len(tokens[0].split('..')) == 2:
        tmp = tokens[0].split('..')
        hi = int(tmp[0])
        lo = int(tmp[1])
        if hi <= lo:
          sys.exit("%s: bad range %d..%d" % (name,hi,lo))
      else:
        hi = lo = int(tokens[0])

      if tokens[1] != 'ignore':
        val = int(tokens[1], 0)
        if val >= (1 << (hi-lo+1)):
          sys.exit("%s: bad value %d for range %d..%d" % (name,val,hi,lo))
        mymatch = mymatch | (val << lo)
        mymask = mymask | ((1<<(hi+1))-(1<<lo))

      if cover & ((1<<(hi+1))-(1<<lo)):
        sys.exit("%s: overspecified" % name)
      cover = cover | ((1<<(hi+1))-(1<<lo))

    elif token in arglut:
      if cover & ((1<<(arglut[token][0]+1))-(1<<arglut[token][1])):
        sys.exit("%s: overspecified" % name)
      cover = cover | ((1<<(arglut[token][0]+1))-(1<<arglut[token][1]))
      arguments[name].append(token)

    else:
      sys.exit("%s: unknown token %s" % (name,token))

  if not (cover == 0xFFFFFFFFFFFFFFFF or cover == 0xFFFFFFFF or cover == 0xFFFF):
    sys.exit("%s: not all bits are covered(%x)" % (name,cover))

  if pseudo:
    pseudos[name] = 1
  else:
    for name2,match2 in match.iteritems():
      if name2 not in pseudos and (match2 & mymask) == mymatch:
        sys.exit("%s and %s overlap" % (name,name2))

  mask[name] = mymask
  match[name] = mymatch
  namelist.append(name)

if sys.argv[1] == '-tex':
  make_latex_table()
elif sys.argv[1] == '-htex':
  make_hwacha_latex_table()
elif sys.argv[1] == '-privtex':
  make_supervisor_latex_table()
elif sys.argv[1] == '-chisel':
  make_chisel()
elif sys.argv[1] == '-hchisel':
  make_hwacha_chisel()
elif sys.argv[1] == '-c':
  make_c(match,mask)
else:
  assert 0
